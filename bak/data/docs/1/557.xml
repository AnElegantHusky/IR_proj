<?xml version='1.0' encoding='utf-8'?>
<doc><id>557</id><url>https://docs.python.org/zh-cn/3/extending/newtypes.html</url><title>定义扩展类型：已分类主题</title><body>本章节目标是提供一个各种你可以实现的类型方法及其功能的简短介绍。
这是C类型 PyTypeObject 的定义，省略了只用于调试构建的字段:
这里有 很多 方法。但是不要太担心，如果你要定义一个类型，通常只需要实现少量的方法。
正如你猜到的一样，我们正要一步一步详细介绍各种处理程序。因为有大量的历史包袱影响字段的排序，所以我们不会根据它们在结构体里定义的顺序讲解。通常非常容易找到一个包含你需要的字段的例子，然后改变值去适应你新的类型。
类型的名字 - 上一章提到过的，会出现在很多地方，几乎全部都是为了诊断目的。尝试选择一个好名字，对于诊断很有帮助。
这些字段告诉运行时在创造这个类型的新对象时需要分配多少内存。Python为了可变长度的结构（想下：字符串，元组）有些内置支持，这是 tp_itemsize 字段存在的原由。这部分稍后解释。
这里你可以放置一段字符串（或者它的地址），当你想在Python脚本引用 obj.__doc__ 时返回这段文档字符串。
现在我们来看一下基本类型方法 - 大多数扩展类型将实现的方法。
当您的类型实例的引用计数减少为零并且Python解释器想要回收它时，将调用此函数。如果你的类型有内存可供释放或执行其他清理，你可以把它放在这里。 对象本身也需要在这里释放。 以下是此函数的示例：
One important requirement of the deallocator function is that it leaves any
pending exceptions alone.  This is important since deallocators are frequently
called as the interpreter unwinds the Python stack; when the stack is unwound
due to an exception (rather than normal returns), nothing is done to protect the
deallocators from seeing that an exception has already been set.  Any actions
which a deallocator performs which may cause additional Python code to be
executed may detect that an exception has been set.  This can lead to misleading
errors from the interpreter.  The proper way to protect against this is to save
a pending exception before performing the unsafe action, and restoring it when
done.  This can be done using the PyErr_Fetch() and
PyErr_Restore() functions:
注解
There are limitations to what you can safely do in a deallocator function.
First, if your type supports garbage collection (using tp_traverse
and/or tp_clear), some of the object's members can have been
cleared or finalized by the time tp_dealloc is called.  Second, in
tp_dealloc, your object is in an unstable state: its reference
count is equal to zero.  Any call to a non-trivial object or API (as in the
example above) might end up calling tp_dealloc again, causing a
double free and a crash.
从 Python 3.4 开始，推荐不要在 tp_dealloc 放复杂的终结代码，而是使用新的 tp_finalize 类型方法。
参见
PEP 442 解释了新的终结方案。
在 Python 中，有两种方式可以生成对象的文本表示: repr() 函数和 str() 函数。 (print() 函数会直接调用 str()。) 这些处理程序都是可选的。
tp_repr 处理程序应该返回一个字符串对象，其中包含调用它的实例的表示形式。 下面是一个简单的例子:
如果没有指定 tp_repr 处理程序，解释器将提供一个使用 tp_name 的表示形式以及对象的惟一标识值。
The tp_str handler is to str() what the tp_repr handler
described above is to repr(); that is, it is called when Python code calls
str() on an instance of your object.  Its implementation is very similar
to the tp_repr function, but the resulting string is intended for human
consumption.  If tp_str is not specified, the tp_repr handler is
used instead.
下面是一个简单的例子:
For every object which can support attributes, the corresponding type must
provide the functions that control how the attributes are resolved.  There needs
to be a function which can retrieve attributes (if any are defined), and another
to set attributes (if setting attributes is allowed).  Removing an attribute is
a special case, for which the new value passed to the handler is NULL.
Python supports two pairs of attribute handlers; a type that supports attributes
only needs to implement the functions for one pair.  The difference is that one
pair takes the name of the attribute as a char*, while the other
accepts a PyObject*.  Each type can use whichever pair makes more
sense for the implementation's convenience.
If accessing attributes of an object is always a simple operation (this will be
explained shortly), there are generic implementations which can be used to
provide the PyObject* version of the attribute management functions.
The actual need for type-specific attribute handlers almost completely
disappeared starting with Python 2.2, though there are many examples which have
not been updated to use some of the new generic mechanism that is available.
Most extension types only use simple attributes.  So, what makes the
attributes simple?  There are only a couple of conditions that must be met:
The name of the attributes must be known when PyType_Ready() is
called.
不需要特殊的处理来记录属性是否被查找或设置，也不需要根据值采取操作。
请注意，此列表不对属性的值、值的计算时间或相关数据的存储方式施加任何限制。
When PyType_Ready() is called, it uses three tables referenced by the
type object to create descriptors which are placed in the dictionary of the
type object.  Each descriptor controls access to one attribute of the instance
object.  Each of the tables is optional; if all three are NULL, instances of
the type will only have attributes that are inherited from their base type, and
should leave the tp_getattro and tp_setattro fields NULL as
well, allowing the base type to handle attributes.
表被声明为object::类型的三个字段:
If tp_methods is not NULL, it must refer to an array of
PyMethodDef structures.  Each entry in the table is an instance of this
structure:
One entry should be defined for each method provided by the type; no entries are
needed for methods inherited from a base type.  One additional entry is needed
at the end; it is a sentinel that marks the end of the array.  The
ml_name field of the sentinel must be NULL.
The second table is used to define attributes which map directly to data stored
in the instance.  A variety of primitive C types are supported, and access may
be read-only or read-write.  The structures in the table are defined as:
For each entry in the table, a descriptor will be constructed and added to the
type which will be able to extract a value from the instance structure.  The
type field should contain one of the type codes defined in the
structmember.h header; the value will be used to determine how to
convert Python values to and from C values.  The flags field is used to
store flags which control how the attribute can be accessed.
以下标志常量定义在:file: ' structmember.h ';它们可以使用bitwise-OR组合。
常数
含义
READONLY
没有可写的
READ_RESTRICTED
Not readable in restricted mode.
WRITE_RESTRICTED
Not writable in restricted mode.
RESTRICTED
在受限模式下不可读，也不可写。
An interesting advantage of using the tp_members table to build
descriptors that are used at runtime is that any attribute defined this way can
have an associated doc string simply by providing the text in the table.  An
application can use the introspection API to retrieve the descriptor from the
class object, and get the doc string using its __doc__ attribute.
As with the tp_methods table, a sentinel entry with a name value
of NULL is required.
For simplicity, only the char* version will be demonstrated here; the
type of the name parameter is the only difference between the char*
and PyObject* flavors of the interface. This example effectively does
the same thing as the generic example above, but does not use the generic
support added in Python 2.2.  It explains how the handler functions are
called, so that if you do need to extend their functionality, you'll understand
what needs to be done.
The tp_getattr handler is called when the object requires an attribute
look-up.  It is called in the same situations where the __getattr__()
method of a class would be called.
Here is an example:
The tp_setattr handler is called when the __setattr__() or
__delattr__() method of a class instance would be called.  When an
attribute should be deleted, the third parameter will be NULL.  Here is an
example that simply raises an exception; if this were really all you wanted, the
tp_setattr handler should be set to NULL.
The tp_richcompare handler is called when comparisons are needed.  It is
analogous to the rich comparison methods, like
__lt__(), and also called by PyObject_RichCompare() and
PyObject_RichCompareBool().
This function is called with two Python objects and the operator as arguments,
where the operator is one of Py_EQ, Py_NE, Py_LE, Py_GT,
Py_LT or Py_GT.  It should compare the two objects with respect to the
specified operator and return Py_True or Py_False if the comparison is
successful, Py_NotImplemented to indicate that comparison is not
implemented and the other object's comparison method should be tried, or NULL
if an exception was set.
Here is a sample implementation, for a datatype that is considered equal if the
size of an internal pointer is equal:
Python supports a variety of abstract 'protocols;' the specific interfaces
provided to use these interfaces are documented in 抽象对象层.
A number of these abstract interfaces were defined early in the development of
the Python implementation.  In particular, the number, mapping, and sequence
protocols have been part of Python since the beginning.  Other protocols have
been added over time.  For protocols which depend on several handler routines
from the type implementation, the older protocols have been defined as optional
blocks of handlers referenced by the type object.  For newer protocols there are
additional slots in the main type object, with a flag bit being set to indicate
that the slots are present and should be checked by the interpreter.  (The flag
bit does not indicate that the slot values are non-NULL. The flag may be set
to indicate the presence of a slot, but a slot may still be unfilled.)
If you wish your object to be able to act like a number, a sequence, or a
mapping object, then you place the address of a structure that implements the C
type PyNumberMethods, PySequenceMethods, or
PyMappingMethods, respectively. It is up to you to fill in this
structure with appropriate values. You can find examples of the use of each of
these in the Objects directory of the Python source distribution.
This function, if you choose to provide it, should return a hash number for an
instance of your data type. Here is a simple example:
Py_hash_t is a signed integer type with a platform-varying width.
Returning -1 from tp_hash indicates an error,
which is why you should be careful to avoid returning it when hash computation
is successful, as seen above.
This function is called when an instance of your data type is "called", for
example, if obj1 is an instance of your data type and the Python script
contains obj1('hello'), the tp_call handler is invoked.
This function takes three arguments:
self is the instance of the data type which is the subject of the call.
If the call is obj1('hello'), then self is obj1.
args is a tuple containing the arguments to the call.  You can use
PyArg_ParseTuple() to extract the arguments.
kwds is a dictionary of keyword arguments that were passed. If this is
non-NULL and you support keyword arguments, use
PyArg_ParseTupleAndKeywords() to extract the arguments.  If you
do not want to support keyword arguments and this is non-NULL, raise a
TypeError with a message saying that keyword arguments are not supported.
Here is a toy tp_call implementation:
These functions provide support for the iterator protocol.  Both handlers
take exactly one parameter, the instance for which they are being called,
and return a new reference.  In the case of an error, they should set an
exception and return NULL.  tp_iter corresponds
to the Python __iter__() method, while tp_iternext
corresponds to the Python __next__() method.
Any iterable object must implement the tp_iter
handler, which must return an iterator object.  Here the same guidelines
apply as for Python classes:
For collections (such as lists and tuples) which can support multiple
independent iterators, a new iterator should be created and returned by
each call to tp_iter.
Objects which can only be iterated over once (usually due to side effects of
iteration, such as file objects) can implement tp_iter
by returning a new reference to themselves -- and should also therefore
implement the tp_iternext  handler.
Any iterator object should implement both tp_iter
and tp_iternext.  An iterator's
tp_iter handler should return a new reference
to the iterator.  Its tp_iternext handler should
return a new reference to the next object in the iteration, if there is one.
If the iteration has reached the end, tp_iternext
may return NULL without setting an exception, or it may set
StopIteration in addition to returning NULL; avoiding
the exception can yield slightly better performance.  If an actual error
occurs, tp_iternext should always set an exception
and return NULL.
One of the goals of Python's weak reference implementation is to allow any type
to participate in the weak reference mechanism without incurring the overhead on
performance-critical objects (such as numbers).
参见
Documentation for the weakref module.
For an object to be weakly referencable, the extension type must do two things:
Include a PyObject* field in the C object structure dedicated to
the weak reference mechanism.  The object's constructor should leave it
NULL (which is automatic when using the default
tp_alloc).
Set the tp_weaklistoffset type member
to the offset of the aforementioned field in the C object structure,
so that the interpreter knows how to access and modify that field.
Concretely, here is how a trivial object structure would be augmented
with the required field:
And the corresponding member in the statically-declared type object:
The only further addition is that tp_dealloc needs to clear any weak
references (by calling PyObject_ClearWeakRefs()) if the field is
non-NULL:
In order to learn how to implement any specific method for your new data type,
get the CPython source code.  Go to the Objects directory,
then search the C source files for tp_ plus the function you want
(for example, tp_richcompare).  You will find examples of the function
you want to implement.
When you need to verify that an object is a concrete instance of the type you
are implementing, use the PyObject_TypeCheck() function.  A sample of
its use might be something like the following:
参见
https://www.python.org/downloads/source/
https://github.com/python/cpython
2. 自定义扩展类型：教程
4. 构建C/C++扩展
</body></doc>