<?xml version='1.0' encoding='utf-8'?>
<doc><id>199</id><url>https://docs.python.org/zh-cn/3/library/importlib.metadata.html</url><title>Using importlib.metadata</title><body>注解
This functionality is provisional and may deviate from the usual
version semantics of the standard library.
importlib.metadata is a library that provides for access to installed
package metadata.  Built in part on Python's import system, this library
intends to replace similar functionality in the entry point
API and metadata API of pkg_resources.  Along with
importlib.resources in Python 3.7
and newer (backported as importlib_resources for older versions of
Python), this can eliminate the need to use the older and less efficient
pkg_resources package.
By "installed package" we generally mean a third-party package installed into
Python's site-packages directory via tools such as pip.  Specifically,
it means a package with either a discoverable dist-info or egg-info
directory, and metadata defined by PEP 566 or its older specifications.
By default, package metadata can live on the file system or in zip archives on
sys.path.  Through an extension mechanism, the metadata can live almost
anywhere.
Let's say you wanted to get the version string for a package you've installed
using pip.  We start by creating a virtual environment and installing
something into it:
You can get the version string for wheel by running the following:
You can also get the set of entry points keyed by group, such as
console_scripts, distutils.commands and others.  Each group contains a
sequence of EntryPoint objects.
You can get the metadata for a distribution:
You can also get a distribution's version number, list its
constituent files, and get a list of the distribution's
Distribution requirements.
This package provides the following functionality via its public API.
The entry_points() function returns a dictionary of all entry points,
keyed by group.  Entry points are represented by EntryPoint instances;
each EntryPoint has a .name, .group, and .value attributes and
a .load() method to resolve the value.
The group and name are arbitrary values defined by the package author
and usually a client will wish to resolve all entry points for a particular
group.  Read the setuptools docs
for more information on entrypoints, their definition, and usage.
Every distribution includes some metadata, which you can extract using the
metadata() function:
The keys of the returned data structure 1 name the metadata keywords, and
their values are returned unparsed from the distribution metadata:
The version() function is the quickest way to get a distribution's version
number, as a string:
You can also get the full set of files contained within a distribution.  The
files() function takes a distribution package name and returns all of the
files installed by this distribution.  Each file object returned is a
PackagePath, a pathlib.Path derived object with additional dist,
size, and hash properties as indicated by the metadata.  For example:
Once you have the file, you can also read its contents:
In the case where the metadata file listing files
(RECORD or SOURCES.txt) is missing, files() will
return None. The caller may wish to wrap calls to
files() in always_iterable
or otherwise guard against this condition if the target
distribution is not known to have the metadata present.
To get the full set of requirements for a distribution, use the requires()
function:
While the above API is the most common and convenient usage, you can get all
of that information from the Distribution class.  A Distribution is an
abstract object that represents the metadata for a Python package.  You can
get the Distribution instance:
Thus, an alternative way to get the version number is through the
Distribution instance:
There are all kinds of additional metadata available on the Distribution
instance:
The full set of available metadata is not described here.  See PEP 566 for additional details.
Because package metadata is not available through sys.path searches, or
package loaders directly, the metadata for a package is found through import
system finders.  To find a distribution package's metadata,
importlib.metadata queries the list of meta path finders on
sys.meta_path.
The default PathFinder for Python includes a hook that calls into
importlib.metadata.MetadataPathFinder for finding distributions
loaded from typical file-system-based paths.
The abstract class importlib.abc.MetaPathFinder defines the
interface expected of finders by Python's import system.
importlib.metadata extends this protocol by looking for an optional
find_distributions callable on the finders from
sys.meta_path and presents this extended interface as the
DistributionFinder abstract base class, which defines this abstract
method:
The DistributionFinder.Context object provides .path and .name
properties indicating the path to search and names to match and may
supply other relevant context.
What this means in practice is that to support finding distribution package
metadata in locations other than the file system, subclass
Distribution and implement the abstract methods. Then from
a custom finder, return instances of this derived Distribution in the
find_distributions() method.
备注
Technically, the returned distribution metadata object is an
email.message.Message
instance, but this is an implementation detail, and not part of the
stable API.  You should only use dictionary-like methods and syntax
to access the metadata contents.
importlib --- import 的实现
Python 语言服务
</body></doc>