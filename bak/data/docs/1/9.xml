<?xml version='1.0' encoding='utf-8'?>
<doc><id>9</id><url>https://docs.python.org/zh-cn/3/tutorial/introduction.html</url><title>Python 的非正式介绍</title><body>在下面的例子中，通过提示符 (&gt;&gt;&gt; 与 ...) 的出现与否来区分输入和输出：如果你想复现这些例子，当提示符出现后，你必须在提示符后键入例子中的每一个词；不以提示符开头的那些行是解释器的输出。注意例子中某行中出现第二个提示符意味着你必须键入一个空白行；这是用来结束多行命令的。
这个手册中的许多例子都包含注释，甚至交互性命令中也有。Python中的注释以井号 # 开头，并且一直延伸到该文本行结束为止。注释可以出现在一行的开头或者是空白和代码的后边，但是不能出现在字符串中间。字符串中的井号就是井号。因为注释是用来阐明代码的，不会被 Python 解释，所以在键入这些例子时，注释是可以被忽略的。
几个例子:
让我们尝试一些简单的 Python 命令。启动解释器，等待界面中的提示符，&gt;&gt;&gt; （这应该花不了多少时间）。
解释器就像一个简单的计算器一样：你可以在里面输入一个表达式然后它会写出答案。 表达式的语法很直接：运算符 +、-、*、/ 的用法和其他大部分语言一样（比如 Pascal 或者 C 语言）；括号 (()) 用来分组。比如:
整数（比如 2、4、20 ）的类型是 int，有小数部分的（比如 5.0、1.6 ）的类型是 float。 在这个手册的后半部分我们会看到更多的数字类型。
除法运算 (/) 永远返回浮点数类型。如果要做 floor division 得到一个整数结果（忽略小数部分）你可以使用 // 运算符；如果要计算余数，可以使用 %
在Python中，可以使用 ** 运算符来计算乘方 1
等号 (=) 用于给一个变量赋值。然后在下一个交互提示符之前不会有结果显示出来:
如果一个变量未定义（未赋值），试图使用它时会向你提示错误:
Python中提供浮点数的完整支持；包含多种混合类型运算数的运算会把整数转换为浮点数:
在交互模式下，上一次打印出来的表达式被赋值给变量 _。这意味着当你把Python用作桌面计算器时，继续计算会相对简单，比如:
这个变量应该被使用者当作是只读类型。不要向它显式地赋值——你会创建一个和它名字相同独立的本地变量，它会使用魔法行为屏蔽内部变量。
除了 int 和 float，Python也支持其他类型的数字，例如 Decimal 或者 Fraction。Python 也内置对 复数 的支持，使用后缀 j 或者 J 就可以表示虚数部分（例如 3+5j ）。
除了数字，Python 也可以操作字符串。字符串有多种形式，可以使用单引号（'...'），双引号（"..."）都可以获得同样的结果 2。反斜杠 \ 可以用来转义:
在交互式解释器中，输出的字符串外面会加上引号，特殊字符会使用反斜杠来转义。 虽然有时这看起来会与输入不一样（外面所加的引号可能会改变），但两个字符串是相同的。 如果字符串中有单引号而没有双引号，该字符串外将加双引号来表示，否则就加单引号。 print() 函数会生成可读性更强的输出，即略去两边的引号，并且打印出经过转义的特殊字符:
如果你不希望前置了 \ 的字符转义成特殊字符，可以使用 原始字符串 方式，在引号前添加 r 即可:
字符串字面值可以跨行连续输入。一种方式是用三重引号："""...""" 或 '''...'''。字符串中的回车换行会自动包含到字符串中，如果不想包含，在行尾添加一个 \ 即可。如下例:
将产生如下输出（注意最开始的换行没有包括进来）:
字符串可以用 + 进行连接（粘到一起），也可以用 * 进行重复:
相邻的两个或多个 字符串字面值 （引号引起来的字符）将会自动连接到一起.
把很长的字符串拆开分别输入的时候尤其有用:
只能对两个字面值这样操作，变量或表达式不行:
如果你想连接变量，或者连接变量和字面值，可以用 + 号:
字符串是可以被 索引 （下标访问）的，第一个字符索引是 0。单个字符并没有特殊的类型，只是一个长度为一的字符串:
索引也可以用负数，这种会从右边开始数:
注意 -0 和 0 是一样的，所以负数索引从 -1 开始。
除了索引，字符串还支持 切片。索引可以得到单个字符，而 切片 可以获取子字符串:
注意切片的开始总是被包括在结果中，而结束不被包括。这使得 s[:i] + s[i:] 总是等于 s
切片的索引有默认值；省略开始索引时默认为0，省略结束索引时默认为到字符串的结束:
您也可以这么理解切片：将索引视作指向字符 之间 ，第一个字符的左侧标为0，最后一个字符的右侧标为 n ，其中 n 是字符串长度。例如:
第一行数标注了字符串 0...6 的索引的位置，第二行标注了对应的负的索引。那么从 i 到 j 的切片就包括了标有 i 和 j 的位置之间的所有字符。
对于使用非负索引的切片，如果索引不越界，那么得到的切片长度就是起止索引之差。例如， word[1:3] 的长度为2。
试图使用过大的索引会产生一个错误:
但是，切片中的越界索引会被自动处理:
Python 中的字符串不能被修改，它们是  immutable 的。因此，向字符串的某个索引位置赋值会产生一个错误:
如果需要一个不同的字符串，应当新建一个:
内建函数 len() 返回一个字符串的长度:
参见
字符串是一种 序列类型 ，因此也支持序列类型的各种操作。
字符串支持许多变换和查找的方法。
内嵌表达式的字符串字面值。
使用 str.format() 进行字符串格式化。
这里详述了使用 % 运算符进行字符串格式化。
Python 中可以通过组合一些值得到多种 复合 数据类型。其中最常用的 列表 ，可以通过方括号括起、逗号分隔的一组值（元素）得到。一个 列表 可以包含不同类型的元素，但通常使用时各个元素类型相同:
和字符串（以及各种内置的 sequence 类型）一样，列表也支持索引和切片:
所有的切片操作都返回一个包含所请求元素的新列表。 这意味着以下切片操作会返回列表的一个 浅拷贝:
列表同样支持拼接操作:
与 immutable 的字符串不同, 列表是一个 mutable 类型，就是说，它自己的内容可以改变:
你也可以在列表末尾通过 append() 方法 来添加新元素（我们将在后面介绍有关方法的详情）:
给切片赋值也是可以的，这样甚至可以改变列表大小，或者把列表整个清空:
内置函数 len() 也可以作用到列表上:
也可以嵌套列表 (创建包含其他列表的列表), 比如说:
当然，我们可以将 Python 用于更复杂的任务，而不是仅仅两个和两个一起添加。 例如，我们可以编写 斐波那契数列 的初始子序列，如下所示:
这个例子引入了几个新的特性。
第一行含有一个 多重赋值: 变量 a 和 b 同时得到了新值 0 和 1.  最后一行又用了一次多重赋值, 这展示出了右手边的表达式，在任何赋值发生之前就被求值了。右手边的表达式是从左到右被求值的。
while 循环只要它的条件（这里指： a &lt; 10）保持为真就会一直执行。Python 和 C 一样，任何非零整数都为真；零为假。这个条件也可以是字符串或是列表的值，事实上任何序列都可以；长度非零就为真，空序列就为假。在这个例子里，判断条件是一个简单的比较。标准的比较操作符的写法和 C 语言里是一样： &lt; （小于）、 &gt; （大于）、 == （等于）、 &lt;= （小于或等于)、 &gt;= （大于或等于）以及 != （不等于）。
循环体 是 缩进的 ：缩进是 Python 组织语句的方式。在交互式命令行里，你得给每个缩进的行敲下 Tab 键或者（多个）空格键。实际上用文本编辑器的话，你要准备更复杂的输入方式；所有像样的文本编辑器都有自动缩进的设置。交互式命令行里，当一个组合的语句输入时, 需要在最后敲一个空白行表示完成（因为语法分析器猜不出来你什么时候打的是最后一行）。注意，在同一块语句中的每一行，都要缩进相同的长度。
print() 函数将所有传进来的参数值打印出来. 它和直接输入你要显示的表达式(比如我们之前在计算器的例子里做的)不一样， print() 能处理多个参数，包括浮点数，字符串。 字符串会打印不带引号的内容, 并且在参数项之间会插入一个空格, 这样你就可以很好的把东西格式化, 像这样:
关键字参数 end 可以用来取消输出后面的换行, 或使用另外一个字符串来结尾:
备注
因为 ** 比 - 有更高的优先级, 所以 -3**2 会被解释成 -(3**2) ，因此结果是 -9.  为了避免这个并且得到结果 9, 你可以用这个式子 (-3)**2.
和其他语言不一样的是, 特殊字符比如说 \n 在单引号 ('...') 和双引号 ("...") 里有一样的意义. 这两种引号唯一的区别是，你不需要在单引号里转义双引号 " (但是你必须把单引号转义成 \') ， 反之亦然.
2. 使用 Python 解释器
4. 其他流程控制工具
</body></doc>