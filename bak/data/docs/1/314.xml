<?xml version='1.0' encoding='utf-8'?>
<doc><id>314</id><url>https://docs.python.org/zh-cn/3/c-api/complex.html</url><title>复数对象</title><body>从C API看，Python的复数对象由两个不同的部分实现：一个是在Python程序使用的Python对象，另外的是一个代表真正复数值的C结构体。API提供了函数共同操作两者。
需要注意的是接受这些结构体的作为参数并当做结果返回的函数，都是传递“值”而不是引用指针。此规则适用于整个API。
这是一个对应Python复数对象的值部分的C结构体。绝大部分处理复数对象的函数都用这类型的结构体作为输入或者输出值，它可近似地定义为：
返回两个复数的和，用 C 类型 Py_complex 表示。
返回两个复数的差，用 C 类型 Py_complex 表示。
返回复数 complex 的负值，用 C 类型 Py_complex 表示。
返回两个复数的乘积，用 C 类型 Py_complex 表示。
返回两个复数的商，用 C 类型 Py_complex 表示。
如果 divisor 为空，这个方法返回零并设置 errno 为 EDOM。
返回 num 的 exp 次幂，用 C 类型 Py_complex 表示。
如果 num 为空且 exp 不是正实数，这个方法返回零并设置 errno 为 EDOM。
这个C类型 PyObject 的子类型代表一个 Python 复数对象。
这是个属于 PyTypeObject 的代表Python复数类型的实例。在Python层面的类型 complex 是同一个对象。
如果它的变量是一个C类型 PyComplexObject 或者是C类型 PyComplexObject 的子类型，返回真。
如果它的参数是一个C类型 PyComplexObject 但不是C类型 PyComplexObject 的子类型，返回真。
根据C类型 Py_complex 的值生成一个新的Python复数对象。
根据 real 和 imag 返回一个新的C类型 PyComplexObject 对象。
以C类型 double 返回 op 的实部。
以C类型 double 返回 op 的虚部。
返回复数 op 的C类型 Py_complex 值。
如果 op 不是一个 Python 复数对象，但是具有 __complex__() 方法，此方法将首先被调用，将 op 转换为一个 Python 复数对象。 如果 __complex__() 未定义则将回退至 __float__()，如果 __float__() 未定义则将回退至 __index__()。 如果失败，此方法将返回 -1.0 作为实数值。
在 3.8 版更改: 如果可用将使用 __index__()。
浮点数对象
bytes 对象
</body></doc>