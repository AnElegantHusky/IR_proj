<?xml version='1.0' encoding='utf-8'?>
<doc><id>264</id><url>https://docs.python.org/zh-cn/3/library/http.cookies.html</url><title> --- HTTP状态管理</title><body>源代码: Lib/http/cookies.py
The http.cookies module defines classes for abstracting the concept of
cookies, an HTTP state management mechanism. It supports both simple string-only
cookies, and provides an abstraction for having any serializable data-type as
cookie value.
The module formerly strictly applied the parsing rules described in the
RFC 2109 and RFC 2068 specifications.  It has since been discovered that
MSIE 3.0x doesn't follow the character rules outlined in those specs and also
many current day browsers and servers have relaxed parsing rules when comes to
Cookie handling.  As a result, the parsing rules used are a bit less strict.
The character set, string.ascii_letters, string.digits and
!#$%&amp;'*+-.^_`|~: denote the set of valid characters allowed by this module
in Cookie name (as key).
在 3.3 版更改: Allowed ':' as a valid Cookie name character.
注解
On encountering an invalid cookie, CookieError is raised, so if your
cookie data comes from a browser you should always prepare for invalid data
and catch CookieError on parsing.
Exception failing because of RFC 2109 invalidity: incorrect attributes,
incorrect Set-Cookie header, etc.
This class is a dictionary-like object whose keys are strings and whose values
are Morsel instances. Note that upon setting a key to a value, the
value is first converted to a Morsel containing the key and the value.
If input is given, it is passed to the load() method.
This class derives from BaseCookie and overrides value_decode()
and value_encode(). SimpleCookie supports strings as cookie values.
When setting the value, SimpleCookie calls the builtin str() to convert
the value to a string. Values received from HTTP are kept as strings.
参见
HTTP cookie handling for web clients.  The http.cookiejar and
http.cookies modules do not depend on each other.
This is the state management specification implemented by this module.
Return a tuple (real_value, coded_value) from a string representation.
real_value can be any type. This method does no decoding in
BaseCookie --- it exists so it can be overridden.
Return a tuple (real_value, coded_value). val can be any type, but
coded_value will always be converted to a string.
This method does no encoding in BaseCookie --- it exists so it can
be overridden.
In general, it should be the case that value_encode() and
value_decode() are inverses on the range of value_decode.
Return a string representation suitable to be sent as HTTP headers. attrs and
header are sent to each Morsel's output() method. sep is used
to join the headers together, and is by default the combination '\r\n'
(CRLF).
Return an embeddable JavaScript snippet, which, if run on a browser which
supports JavaScript, will act the same as if the HTTP headers was sent.
The meaning for attrs is the same as in output().
If rawdata is a string, parse it as an HTTP_COOKIE and add the values
found there as Morsels. If it is a dictionary, it is equivalent to:
Abstract a key/value pair, which has some RFC 2109 attributes.
Morsels are dictionary-like objects, whose set of keys is constant --- the valid
RFC 2109 attributes, which are
expires
path
comment
domain
max-age
secure
version
httponly
samesite
The attribute httponly specifies that the cookie is only transferred
in HTTP requests, and is not accessible through JavaScript. This is intended
to mitigate some forms of cross-site scripting.
The attribute samesite specifies that the browser is not allowed to
send the cookie along with cross-site requests. This helps to mitigate CSRF
attacks. Valid values for this attribute are "Strict" and "Lax".
The keys are case-insensitive and their default value is ''.
在 3.5 版更改: __eq__() now takes key and value
into account.
在 3.7 版更改: Attributes key, value and
coded_value are read-only.  Use set() for
setting them.
在 3.8 版更改: Added support for the samesite attribute.
Cookie的值。
The encoded value of the cookie --- this is what should be sent.
The name of the cookie.
Set the key, value and coded_value attributes.
Whether K is a member of the set of keys of a Morsel.
Return a string representation of the Morsel, suitable to be sent as an HTTP
header. By default, all the attributes are included, unless attrs is given, in
which case it should be a list of attributes to use. header is by default
"Set-Cookie:".
Return an embeddable JavaScript snippet, which, if run on a browser which
supports JavaScript, will act the same as if the HTTP header was sent.
The meaning for attrs is the same as in output().
Return a string representing the Morsel, without any surrounding HTTP or
JavaScript.
The meaning for attrs is the same as in output().
Update the values in the Morsel dictionary with the values in the dictionary
values.  Raise an error if any of the keys in the values dict is not a
valid RFC 2109 attribute.
在 3.5 版更改: an error is raised for invalid keys.
Return a shallow copy of the Morsel object.
在 3.5 版更改: return a Morsel object instead of a dict.
Raise an error if key is not a valid RFC 2109 attribute, otherwise
behave the same as dict.setdefault().
The following example demonstrates how to use the http.cookies module.
http.server --- HTTP 服务器
http.cookiejar —— HTTP 客户端的 Cookie 处理
</body></doc>