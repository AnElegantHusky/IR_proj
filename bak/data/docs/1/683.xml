<?xml version='1.0' encoding='utf-8'?>
<doc><id>683</id><url>https://docs.python.org/zh-cn/3/c-api/init_config.html</url><title>Python初始化配置</title><body>3.8 新版功能.
结构
PyConfig
PyPreConfig
PyStatus
PyWideStringList
函数
PyConfig_Clear()
PyConfig_InitIsolatedConfig()
PyConfig_InitPythonConfig()
PyConfig_Read()
PyConfig_SetArgv()
PyConfig_SetBytesArgv()
PyConfig_SetBytesString()
PyConfig_SetString()
PyConfig_SetWideStringList()
PyPreConfig_InitIsolatedConfig()
PyPreConfig_InitPythonConfig()
PyStatus_Error()
PyStatus_Exception()
PyStatus_Exit()
PyStatus_IsError()
PyStatus_IsExit()
PyStatus_NoMemory()
PyStatus_Ok()
PyWideStringList_Append()
PyWideStringList_Insert()
Py_ExitStatusException()
Py_InitializeFromConfig()
Py_PreInitialize()
Py_PreInitializeFromArgs()
Py_PreInitializeFromBytesArgs()
Py_RunMain()
The preconfiguration (PyPreConfig type) is stored in
_PyRuntime.preconfig and the configuration (PyConfig type) is stored in
PyInterpreterState.config.
See also Initialization, Finalization, and Threads.
参见
PEP 587 "Python 初始化配置".
List of wchar_t* strings.
If length is non-zero, items must be non-NULL and all strings must be
non-NULL.
方法
Append item to list.
Python must be preinitialized to call this function.
Insert item into list at index.
If index is greater than or equal to list length, append item to
list.
index must be greater than or equal to 0.
Python must be preinitialized to call this function.
Structure fields:
List 长度。
列表项目。
Structure to store an initialization function status: success, error
or exit.
For an error, it can store the C function name which created the error.
Structure fields:
Exit code. Argument passed to exit().
错误信息
Name of the function which created an error, can be NULL.
Functions to create a status:
完成。
Initialization error with a message.
Memory allocation failure (out of memory).
Exit Python with the specified exit code.
Functions to handle a status:
Is the status an error or an exit? If true, the exception must be
handled; by calling Py_ExitStatusException() for example.
结果错误吗？
结果是否退出？
Call exit(exitcode) if status is an exit. Print the error
message and exit with a non-zero exit code if status is an error.  Must
only be called if PyStatus_Exception(status) is non-zero.
注解
Internally, Python uses macros which set PyStatus.func,
whereas functions to create a status set func to NULL.
示例:
Structure used to preinitialize Python:
Set the Python memory allocator
Configure the LC_CTYPE locale
Set the UTF-8 mode
Function to initialize a preconfiguration:
Initialize the preconfiguration with Python Configuration.
Initialize the preconfiguration with Isolated Configuration.
Structure fields:
Name of the memory allocator:
PYMEM_ALLOCATOR_NOT_SET (0): don't change memory allocators
(use defaults)
PYMEM_ALLOCATOR_DEFAULT (1): default memory allocators
PYMEM_ALLOCATOR_DEBUG (2): default memory allocators with
debug hooks
PYMEM_ALLOCATOR_MALLOC (3): force usage of malloc()
PYMEM_ALLOCATOR_MALLOC_DEBUG (4): force usage of
malloc() with debug hooks
PYMEM_ALLOCATOR_PYMALLOC (5): Python pymalloc memory
allocator
PYMEM_ALLOCATOR_PYMALLOC_DEBUG (6): Python pymalloc
memory allocator with debug hooks
PYMEM_ALLOCATOR_PYMALLOC and PYMEM_ALLOCATOR_PYMALLOC_DEBUG
are not supported if Python is configured using --without-pymalloc
See Memory Management.
Set the LC_CTYPE locale to the user preferred locale? If equals to 0, set
coerce_c_locale and coerce_c_locale_warn to 0.
If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE
locale to decide if it should be coerced.
If non-zero, emit a warning if the C locale is coerced.
参见 PyConfig.dev_mode.
参见 PyConfig.isolated.
If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to
mbcs, set the filesystem error handler to replace.
Only available on Windows. #ifdef MS_WINDOWS macro can be used for
Windows specific code.
If non-zero, Py_PreInitializeFromArgs() and
Py_PreInitializeFromBytesArgs() parse their argv argument the
same way the regular Python parses command line arguments: see
Command Line Arguments.
参见 PyConfig.use_environment.
If non-zero, enable the UTF-8 mode.
Functions to preinitialize Python:
Preinitialize Python from preconfig preconfiguration.
Preinitialize Python from preconfig preconfiguration and command line
arguments (bytes strings).
Preinitialize Python from preconfig preconfiguration and command line
arguments (wide strings).
The caller is responsible to handle exceptions (error or exit) using
PyStatus_Exception() and Py_ExitStatusException().
For Python Configuration
(PyPreConfig_InitPythonConfig()), if Python is initialized with
command line arguments, the command line arguments must also be passed to
preinitialize Python, since they have an effect on the pre-configuration
like encodings. For example, the -X utf8 command line option
enables the UTF-8 Mode.
PyMem_SetAllocator() can be called after Py_PreInitialize() and
before Py_InitializeFromConfig() to install a custom memory allocator.
It can be called before Py_PreInitialize() if
PyPreConfig.allocator is set to PYMEM_ALLOCATOR_NOT_SET.
Python memory allocation functions like PyMem_RawMalloc() must not be
used before Python preinitialization, whereas calling directly malloc() and
free() is always safe. Py_DecodeLocale() must not be called before
the preinitialization.
Example using the preinitialization to enable the UTF-8 Mode:
Structure containing most parameters to configure Python.
Structure methods:
Initialize configuration with Python Configuration.
Initialize configuration with Isolated Configuration.
Copy the wide character string str into *config_str.
Preinitialize Python if needed.
Decode str using Py_DecodeLocale() and set the result into *config_str.
Preinitialize Python if needed.
Set command line arguments from wide character strings.
Preinitialize Python if needed.
Set command line arguments: decode bytes using Py_DecodeLocale().
Preinitialize Python if needed.
Set the list of wide strings list to length and items.
Preinitialize Python if needed.
Read all Python configuration.
Fields which are already initialized are left unchanged.
Preinitialize Python if needed.
Release configuration memory.
Most PyConfig methods preinitialize Python if needed. In that case, the
Python preinitialization configuration in based on the PyConfig.
If configuration fields which are in common with PyPreConfig are
tuned, they must be set before calling a PyConfig method:
dev_mode
isolated
parse_argv
use_environment
Moreover, if PyConfig_SetArgv() or PyConfig_SetBytesArgv()
is used, this method must be called first, before other methods, since the
preinitialization configuration depends on command line arguments (if
parse_argv is non-zero).
The caller of these methods is responsible to handle exceptions (error or
exit) using PyStatus_Exception() and Py_ExitStatusException().
Structure fields:
Command line arguments, sys.argv. See
parse_argv to parse argv the
same way the regular Python parses Python command line arguments. If
argv is empty, an empty string is added to ensure
that sys.argv always exists and is never empty.
sys.base_exec_prefix.
sys._base_executable: __PYVENV_LAUNCHER__ environment
variable value, or copy of PyConfig.executable.
sys.base_prefix.
If equals to 0, enable unbuffered mode, making the stdout and stderr
streams unbuffered.
stdin is always opened in buffered mode.
If equals to 1, issue a warning when comparing bytes or
bytearray with str, or comparing bytes with
int. If equal or greater to 2, raise a BytesWarning
exception.
Control the validation behavior of hash-based .pyc files (see
PEP 552): --check-hash-based-pycs command line option value.
Valid values: always, never and default.
默认值为: default.
If non-zero, configure C standard streams (stdio, stdout,
stdout). For example, set their mode to O_BINARY on Windows.
Development mode: see -X dev.
If non-zero, dump all objects which are still alive at exit.
Require a debug build of Python (Py_REF_DEBUG macro must be defined).
sys.exec_prefix.
sys.executable.
If non-zero, call faulthandler.enable() at startup.
Filesystem encoding, sys.getfilesystemencoding().
Filesystem encoding errors, sys.getfilesystemencodeerrors().
Randomized hash function seed.
If use_hash_seed is zero, a seed is chosen randomly
at Pythonstartup, and hash_seed is ignored.
Python home directory.
Initialized from PYTHONHOME environment variable value by
default.
If non-zero, profile import time.
Enter interactive mode after executing a script or a command.
Install signal handlers?
交互模式
If greater than 0, enable isolated mode:
sys.path contains neither the script's directory (computed from
argv[0] or the current directory) nor the user's site-packages
directory.
Python REPL doesn't import readline nor enable default readline
configuration on interactive prompts.
Set use_environment and
user_site_directory to 0.
If non-zero, use io.FileIO instead of
io.WindowsConsoleIO for sys.stdin, sys.stdout
and sys.stderr.
Only available on Windows. #ifdef MS_WINDOWS macro can be used for
Windows specific code.
If non-zero, dump statistics on Python pymalloc memory allocator at exit.
The option is ignored if Python is built using --without-pymalloc.
Module search paths as a string separated by DELIM
(os.path.pathsep).
Initialized from PYTHONPATH environment variable value by
default.
sys.path. If module_search_paths_set is
equal to 0, the module_search_paths is overridden
by the function calculating the Path Configuration.
Compilation optimization level:
0: Peephole optimizer (and __debug__ is set to True)
1: Remove assertions, set __debug__ to False
2: Strip docstrings
If non-zero, parse argv the same way the regular
Python command line arguments, and strip Python arguments from
argv: see Command Line Arguments.
If non-zero, turn on parser debugging output (for expert only, depending
on compilation options).
If equal to 0, suppress warnings when calculating the Path
Configuration (Unix only, Windows does not log any
warning). Otherwise, warnings are written into stderr.
sys.prefix.
Program name. Used to initialize executable, and in
early error messages.
sys.pycache_prefix: .pyc cache prefix.
If NULL, sys.pycache_prefix is set to None.
Quiet mode. For example, don't display the copyright and version messages
in interactive mode.
python3 -c COMMAND argument. Used by Py_RunMain().
python3 FILENAME argument. Used by Py_RunMain().
python3 -m MODULE argument. Used by Py_RunMain().
Show allocation counts at exit?
Set to 1 by -X showalloccount command line option.
Need a special Python build with COUNT_ALLOCS macro defined.
Show total reference count at exit?
Set to 1 by -X showrefcount command line option.
Need a debug build of Python (Py_REF_DEBUG macro must be defined).
Import the site module at startup?
Skip the first line of the source?
Encoding and encoding errors of sys.stdin, sys.stdout and
sys.stderr.
If non-zero, call tracemalloc.start() at startup.
If greater than 0, use environment variables.
If non-zero, add user site directory to sys.path.
If non-zero, enable verbose mode.
sys.warnoptions: options of the warnings module to build
warnings filters: lowest to highest priority.
The warnings module adds sys.warnoptions in the reverse
order: the last PyConfig.warnoptions item becomes the first
item of warnings.filters which is checked first (highest
priority).
If non-zero, write .pyc files.
sys.dont_write_bytecode is initialized to the inverted value of
write_bytecode.
sys._xoptions.
If parse_argv is non-zero, argv arguments are parsed the same
way the regular Python parses command line arguments, and Python
arguments are stripped from argv: see Command Line Arguments.
The xoptions options are parsed to set other options: see -X
option.
Function to initialize Python:
Initialize Python from config configuration.
The caller is responsible to handle exceptions (error or exit) using
PyStatus_Exception() and Py_ExitStatusException().
If PyImport_FrozenModules, PyImport_AppendInittab() or
PyImport_ExtendInittab() are used, they must be set or called after Python
preinitialization and before the Python initialization.
Example setting the program name:
More complete example modifying the default configuration, read the
configuration, and then override some parameters:
PyPreConfig_InitIsolatedConfig() and
PyConfig_InitIsolatedConfig() functions create a configuration to
isolate Python from the system. For example, to embed Python into an
application.
This configuration ignores global configuration variables, environments
variables, command line arguments (PyConfig.argv is not parsed)
and user site directory. The C standard streams (ex: stdout) and the
LC_CTYPE locale are left unchanged. Signal handlers are not installed.
Configuration files are still used with this configuration. Set the
Path Configuration ("output fields") to ignore these
configuration files and avoid the function computing the default path
configuration.
PyPreConfig_InitPythonConfig() and PyConfig_InitPythonConfig()
functions create a configuration to build a customized Python which behaves as
the regular Python.
Environments variables and command line arguments are used to configure
Python, whereas global configuration variables are ignored.
This function enables C locale coercion (PEP 538) and UTF-8 Mode
(PEP 540) depending on the LC_CTYPE locale, PYTHONUTF8 and
PYTHONCOERCECLOCALE environment variables.
Example of customized Python always running in isolated mode:
PyConfig contains multiple fields for the path configuration:
路径配置输入：
PyConfig.home
PyConfig.pathconfig_warnings
PyConfig.program_name
PyConfig.pythonpath_env
current working directory: to get absolute paths
PATH environment variable to get the program full path
(from PyConfig.program_name)
__PYVENV_LAUNCHER__ environment variable
(Windows only) Application paths in the registry under
"SoftwarePythonPythonCoreX.YPythonPath" of HKEY_CURRENT_USER and
HKEY_LOCAL_MACHINE (where X.Y is the Python version).
Path configuration output fields:
PyConfig.base_exec_prefix
PyConfig.base_executable
PyConfig.base_prefix
PyConfig.exec_prefix
PyConfig.executable
PyConfig.module_search_paths_set,
PyConfig.module_search_paths
PyConfig.prefix
If at least one "output field" is not set, Python calculates the path
configuration to fill unset fields. If
module_search_paths_set is equal to 0,
module_search_paths is overridden and
module_search_paths_set is set to 1.
It is possible to completely ignore the function calculating the default
path configuration by setting explicitly all path configuration output
fields listed above. A string is considered as set even if it is non-empty.
module_search_paths is considered as set if
module_search_paths_set is set to 1. In this case, path
configuration input fields are ignored as well.
Set pathconfig_warnings to 0 to suppress warnings when
calculating the path configuration (Unix only, Windows does not log any warning).
If base_prefix or base_exec_prefix
fields are not set, they inherit their value from prefix
and exec_prefix respectively.
Py_RunMain() and Py_Main() modify sys.path:
If run_filename is set and is a directory which contains a
__main__.py script, prepend run_filename to
sys.path.
If isolated is zero:
If run_module is set, prepend the current directory
to sys.path. Do nothing if the current directory cannot be read.
If run_filename is set, prepend the directory of the
filename to sys.path.
Otherwise, prepend an empty string to sys.path.
If site_import is non-zero, sys.path can be
modified by the site module. If
user_site_directory is non-zero and the user's
site-package directory exists, the site module appends the user's
site-package directory to sys.path.
The following configuration files are used by the path configuration:
pyvenv.cfg
python._pth (仅Windows)
pybuilddir.txt (仅Unix)
The __PYVENV_LAUNCHER__ environment variable is used to set
PyConfig.base_executable
Execute the command (PyConfig.run_command), the script
(PyConfig.run_filename) or the module
(PyConfig.run_module) specified on the command line or in the
configuration.
By default and when if -i option is used, run the REPL.
Finally, finalizes Python and returns an exit status that can be passed to
the exit() function.
See Python Configuration for an example of
customized Python always running in isolated mode using
Py_RunMain().
This section is a private provisional API introducing multi-phase
initialization, the core feature of the PEP 432:
"Core" initialization phase, "bare minimum Python":
Builtin types;
Builtin exceptions;
Builtin and frozen modules;
The sys module is only partially initialized
(ex: sys.path doesn't exist yet).
"Main" initialization phase, Python is fully initialized:
Install and configure importlib;
Apply the Path Configuration;
Install signal handlers;
Finish sys module initialization (ex: create sys.stdout
and sys.path);
Enable optional features like faulthandler and tracemalloc;
Import the site module;
等等.
Private provisional API:
PyConfig._init_main: if set to 0,
Py_InitializeFromConfig() stops at the "Core" initialization phase.
Move to the "Main" initialization phase, finish the Python initialization.
No module is imported during the "Core" phase and the importlib module is
not configured: the Path Configuration is only
applied during the "Main" phase. It may allow to customize Python in Python to
override or tune the Path Configuration, maybe
install a custom sys.meta_path importer or an import hook, etc.
It may become possible to calculatin the Path Configuration in Python, after the Core phase and before the Main phase,
which is one of the PEP 432 motivation.
The "Core" phase is not properly defined: what should be and what should
not be available at this phase is not specified yet. The API is marked
as private and provisional: the API can be modified or even be removed
anytime until a proper public API is designed.
Example running Python code between "Core" and "Main" initialization
phases:
Initialization, Finalization, and Threads
内存管理
</body></doc>