<?xml version='1.0' encoding='utf-8'?>
<doc><id>335</id><url>https://docs.python.org/zh-cn/3/c-api/intro.html</url><title>概述</title><body>Python 的应用编程接口（API）使得 C 和 C++ 程序员可以在多个层级上访问 Python 解释器。该 API 在 C++ 中同样可用，但为简化描述，通常将其称为 Python/C API。使用 Python/C API 有两个基本的理由。第一个理由是为了特定目的而编写 扩展模块；它们是扩展 Python 解释器功能的 C 模块。这可能是最常见的使用场景。第二个理由是将 Python 用作更大规模应用的组件；这种技巧通常被称为在一个应用中 embedding Python。
编写扩展模块的过程相对来说更易于理解，可以通过“菜谱”的形式分步骤介绍。使用某些工具可在一定程度上自动化这一过程。虽然人们在其他应用中嵌入 Python 的做法早已有之，但嵌入 Python 的过程没有编写扩展模块那样方便直观。
许多 API 函数在你嵌入或是扩展 Python 这两种场景下都能发挥作用；此外，大多数嵌入 Python 的应用程序也需要提供自定义扩展，因此在尝试在实际应用中嵌入 Python 之前先熟悉编写扩展应该会是个好主意。
如果你想要编写可包含于 CPython 的 C 代码，你 必须 遵循在 PEP 7 中定义的指导原则和标准。这些指导原则适用于任何你所要扩展的 Python 版本。在编写你自己的第三方扩展模块时可以不必遵循这些规范，除非你准备在日后向 Python 贡献这些模块。
使用 Python/C API 所需要的全部函数、类型和宏定义可通过下面这行语句包含到你的代码之中：
这意味着包含以下标准头文件：&lt;stdio.h&gt;，&lt;string.h&gt;，&lt;errno.h&gt;，&lt;limits.h&gt;，&lt;assert.h&gt; 和 &lt;stdlib.h&gt;（如果可用）。
注解
由于 Python 可能会定义一些能在某些系统上影响标准头文件的预处理器定义，因此在包含任何标准头文件之前，你 必须 先包含 Python.h。
It is recommended to always define PY_SSIZE_T_CLEAN before including
Python.h.  See 解析参数并构建值变量 for a description of this macro.
Python.h 所定义的全部用户可见名称（由包含的标准头文件所定义的除外）都带有前缀 Py 或者 _Py。以 _Py 打头的名称是供 Python 实现内部使用的，不应被扩展编写者使用。结构成员名称没有保留前缀。
注解
User code should never define names that begin with Py or _Py. This
confuses the reader, and jeopardizes the portability of the user code to
future Python versions, which may define additional names beginning with one
of these prefixes.
头文件通常会与 Python 一起安装。在 Unix 上，它们位于以下目录：prefix/include/pythonversion/ 和 exec_prefix/include/pythonversion/，其中 prefix 和 exec_prefix 是由向 Python 的 configure 脚本传入的对应形参所定义，而 version 则为 '%d.%d' % sys.version_info[:2]。在 Windows 上，头文件安装于 prefix/include，其中 prefix 是向安装程序指定的安装目录。
要包含头文件，请将两个目录（如果不同）都放到你所用编译器的包含搜索路径中。请 不要 将父目录放入搜索路径然后使用 #include &lt;pythonX.Y/Python.h&gt;；这将使得多平台编译不可用，因为 prefix 下平台无关的头文件需要包含来自 exec_prefix 下特定平台的头文件。
C++ users should note that although the API is defined entirely using C, the
header files properly declare the entry points to be extern "C". As a result,
there is no need to do anything special to use the API from C++.
Python 头文件中定义了一些有用的宏。许多是在靠近它们被使用的地方定义的（例如 Py_RETURN_NONE）。其他更为通用的则定义在这里。这里所显示的并不是一个完整的列表。
这个可以在你有一个不打算被触及的代码路径时使用。例如，当一个 switch 语句中所有可能的值都已被 case 子句覆盖了，就可将其用在 default: 子句中。当你非常想在某个位置放一个 assert(0) 或 abort() 调用时也可以用这个。
3.7 新版功能.
返回 x 的绝对值。
3.3 新版功能.
返回 x 和 y 当中的最小值。
3.3 新版功能.
返回 x 和 y 当中的最大值。
3.3 新版功能.
将 x 转换为 C 字符串。例如 Py_STRINGIFY(123) 返回 "123"。
3.4 新版功能.
返回结构 (type) member 的大小，以字节表示。
3.6 新版功能.
参数必须为 [-128, 127] 或 [0, 255] 范围内的字符或整数类型。这个宏将 c 强制转换为 unsigned char 返回。
Like getenv(s), but returns NULL if -E was passed on the
command line (i.e. if Py_IgnoreEnvironmentFlag is set).
Use this for unused arguments in a function definition to silence compiler
warnings. Example: int func(int a, int Py_UNUSED(b)) { return a; }.
3.4 新版功能.
Use this for deprecated declarations.  The macro must be placed before the
symbol name.
示例:
在 3.8 版更改: MSVC support was added.
Creates a variable with name name that can be used in docstrings.
If Python is built without docstrings, the value will be empty.
Use PyDoc_STRVAR for docstrings to support building
Python without docstrings, as specified in PEP 7.
示例:
Creates a docstring for the given input string or an empty string
if docstrings are disabled.
Use PyDoc_STR in specifying docstrings to support
building Python without docstrings, as specified in PEP 7.
示例:
大多数 Python/C API 函数都有一个或多个参数以及一个 PyObject* 类型的返回值。此类型是一个指针，指向表示一个任意 Python 对象的不透明数据类型。由于在大多数情况下（例如赋值、作用域规则和参数传递） Python 语言都会以同样的方式处理所有 Python 对象类型，因此它们由一个单独的 C 类型来表示是很适宜的。几乎所有 Python 对象都生存在堆上：你绝不会声明一个 PyObject 类型的自动或静态变量，只有 PyObject* 类型的指针变量可以被声明。唯一的例外是 type 对象；由于此种对象永远不能被释放，所以它们通常是静态 PyTypeObject 对象。
所有 Python 对象（甚至 Python 整数）都有一个 type 和一个 reference count。对象的类型确定它是什么类型的对象（例如整数、列表或用户定义函数；还有更多，如 标准类型层级结构 中所述）。对于每个众所周知的类型，都有一个宏来检查对象是否属于该类型；例如，当（且仅当） a 所指的对象是 Python 列表时 PyList_Check(a) 为真。
The reference count is important because today's computers have a  finite (and
often severely limited) memory size; it counts how many  different places there
are that have a reference to an object.  Such a  place could be another object,
or a global (or static) C variable, or  a local variable in some C function.
When an object's reference count  becomes zero, the object is deallocated.  If
it contains references to  other objects, their reference count is decremented.
Those other  objects may be deallocated in turn, if this decrement makes their
reference count become zero, and so on.  (There's an obvious problem  with
objects that reference each other here; for now, the solution is  "don't do
that.")
Reference counts are always manipulated explicitly.  The normal way is  to use
the macro Py_INCREF() to increment an object's reference count by one,
and Py_DECREF() to decrement it by   one.  The Py_DECREF() macro
is considerably more complex than the incref one, since it must check whether
the reference count becomes zero and then cause the object's deallocator to be
called. The deallocator is a function pointer contained in the object's type
structure.  The type-specific deallocator takes care of decrementing the
reference counts for other objects contained in the object if this is a compound
object type, such as a list, as well as performing any additional finalization
that's needed.  There's no chance that the reference count can overflow; at
least as many bits are used to hold the reference count as there are distinct
memory locations in virtual memory (assuming sizeof(Py_ssize_t) &gt;= sizeof(void*)).
Thus, the reference count increment is a simple operation.
It is not necessary to increment an object's reference count for every  local
variable that contains a pointer to an object.  In theory, the  object's
reference count goes up by one when the variable is made to  point to it and it
goes down by one when the variable goes out of  scope.  However, these two
cancel each other out, so at the end the  reference count hasn't changed.  The
only real reason to use the  reference count is to prevent the object from being
deallocated as  long as our variable is pointing to it.  If we know that there
is at  least one other reference to the object that lives at least as long as
our variable, there is no need to increment the reference count  temporarily.
An important situation where this arises is in objects  that are passed as
arguments to C functions in an extension module  that are called from Python;
the call mechanism guarantees to hold a  reference to every argument for the
duration of the call.
However, a common pitfall is to extract an object from a list and hold on to it
for a while without incrementing its reference count. Some other operation might
conceivably remove the object from the list, decrementing its reference count
and possibly deallocating it. The real danger is that innocent-looking
operations may invoke arbitrary Python code which could do this; there is a code
path which allows control to flow back to the user from a Py_DECREF(), so
almost any operation is potentially dangerous.
A safe approach is to always use the generic operations (functions  whose name
begins with PyObject_, PyNumber_, PySequence_ or PyMapping_).
These operations always increment the reference count of the object they return.
This leaves the caller with the responsibility to call Py_DECREF() when
they are done with the result; this soon becomes second nature.
The reference count behavior of functions in the Python/C API is best  explained
in terms of ownership of references.  Ownership pertains to references, never
to objects (objects are not owned: they are always shared).  "Owning a
reference" means being responsible for calling Py_DECREF on it when the
reference is no longer needed.  Ownership can also be transferred, meaning that
the code that receives ownership of the reference then becomes responsible for
eventually decref'ing it by calling Py_DECREF() or Py_XDECREF()
when it's no longer needed---or passing on this responsibility (usually to its
caller). When a function passes ownership of a reference on to its caller, the
caller is said to receive a new reference.  When no ownership is transferred,
the caller is said to borrow the reference. Nothing needs to be done for a
borrowed reference.
Conversely, when a calling function passes in a reference to an  object, there
are two possibilities: the function steals a  reference to the object, or it
does not.  Stealing a reference means that when you pass a reference to a
function, that function assumes that it now owns that reference, and you are not
responsible for it any longer.
Few functions steal references; the two notable exceptions are
PyList_SetItem() and PyTuple_SetItem(), which  steal a reference
to the item (but not to the tuple or list into which the item is put!).  These
functions were designed to steal a reference because of a common idiom for
populating a tuple or list with newly created objects; for example, the code to
create the tuple (1, 2, "three") could look like this (forgetting about
error handling for the moment; a better way to code this is shown below):
Here, PyLong_FromLong() returns a new reference which is immediately
stolen by PyTuple_SetItem().  When you want to keep using an object
although the reference to it will be stolen, use Py_INCREF() to grab
another reference before calling the reference-stealing function.
Incidentally, PyTuple_SetItem() is the only way to set tuple items;
PySequence_SetItem() and PyObject_SetItem() refuse to do this
since tuples are an immutable data type.  You should only use
PyTuple_SetItem() for tuples that you are creating yourself.
Equivalent code for populating a list can be written using PyList_New()
and PyList_SetItem().
However, in practice, you will rarely use these ways of creating and populating
a tuple or list.  There's a generic function, Py_BuildValue(), that can
create most common objects from C values, directed by a format string.
For example, the above two blocks of code could be replaced by the following
(which also takes care of the error checking):
It is much more common to use PyObject_SetItem() and friends with items
whose references you are only borrowing, like arguments that were passed in to
the function you are writing.  In that case, their behaviour regarding reference
counts is much saner, since you don't have to increment a reference count so you
can give a reference away ("have it be stolen").  For example, this function
sets all items of a list (actually, any mutable sequence) to a given item:
The situation is slightly different for function return values.   While passing
a reference to most functions does not change your  ownership responsibilities
for that reference, many functions that  return a reference to an object give
you ownership of the reference. The reason is simple: in many cases, the
returned object is created  on the fly, and the reference you get is the only
reference to the  object.  Therefore, the generic functions that return object
references, like PyObject_GetItem() and  PySequence_GetItem(),
always return a new reference (the caller becomes the owner of the reference).
It is important to realize that whether you own a reference returned  by a
function depends on which function you call only --- the plumage (the type of
the object passed as an argument to the function) doesn't enter into it!
Thus, if you  extract an item from a list using PyList_GetItem(), you
don't own the reference --- but if you obtain the same item from the same list
using PySequence_GetItem() (which happens to take exactly the same
arguments), you do own a reference to the returned object.
Here is an example of how you could write a function that computes the sum of
the items in a list of integers; once using  PyList_GetItem(), and once
using PySequence_GetItem().
There are few other data types that play a significant role in  the Python/C
API; most are simple C types such as int,  long,
double and char*.  A few structure types  are used to
describe static tables used to list the functions exported  by a module or the
data attributes of a new object type, and another is used to describe the value
of a complex number.  These will  be discussed together with the functions that
use them.
Python程序员只需要处理特定需要处理的错误异常；未处理的异常会自动传递给调用者，然后传递给调用者的调用者，依此类推，直到他们到达顶级解释器，在那里将它们报告给用户并伴随堆栈回溯。
For C programmers, however, error checking always has to be explicit.  All
functions in the Python/C API can raise exceptions, unless an explicit claim is
made otherwise in a function's documentation.  In general, when a function
encounters an error, it sets an exception, discards any object references that
it owns, and returns an error indicator.  If not documented otherwise, this
indicator is either NULL or -1, depending on the function's return type.
A few functions return a Boolean true/false result, with false indicating an
error.  Very few functions return no explicit error indicator or have an
ambiguous return value, and require explicit testing for errors with
PyErr_Occurred().  These exceptions are always explicitly documented.
Exception state is maintained in per-thread storage (this is  equivalent to
using global storage in an unthreaded application).  A  thread can be in one of
two states: an exception has occurred, or not. The function
PyErr_Occurred() can be used to check for this: it returns a borrowed
reference to the exception type object when an exception has occurred, and
NULL otherwise.  There are a number of functions to set the exception state:
PyErr_SetString() is the most common (though not the most general)
function to set the exception state, and PyErr_Clear() clears the
exception state.
The full exception state consists of three objects (all of which can  be
NULL): the exception type, the corresponding exception  value, and the
traceback.  These have the same meanings as the Python result of
sys.exc_info(); however, they are not the same: the Python objects represent
the last exception being handled by a Python  try ...
except statement, while the C level exception state only exists while
an exception is being passed on between C functions until it reaches the Python
bytecode interpreter's  main loop, which takes care of transferring it to
sys.exc_info() and friends.
Note that starting with Python 1.5, the preferred, thread-safe way to access the
exception state from Python code is to call the function sys.exc_info(),
which returns the per-thread exception state for Python code.  Also, the
semantics of both ways to access the exception state have changed so that a
function which catches an exception will save and restore its thread's exception
state so as to preserve the exception state of its caller.  This prevents common
bugs in exception handling code caused by an innocent-looking function
overwriting the exception being handled; it also reduces the often unwanted
lifetime extension for objects that are referenced by the stack frames in the
traceback.
As a general principle, a function that calls another function to  perform some
task should check whether the called function raised an  exception, and if so,
pass the exception state on to its caller.  It  should discard any object
references that it owns, and return an  error indicator, but it should not set
another exception --- that would overwrite the exception that was just raised,
and lose important information about the exact cause of the error.
A simple example of detecting exceptions and passing them on is shown in the
sum_sequence() example above.  It so happens that this example doesn't
need to clean up any owned references when it detects an error.  The following
example function shows some error cleanup.  First, to remind you why you like
Python, we show the equivalent Python code:
Here is the corresponding C code, in all its glory:
This example represents an endorsed use of the goto statement  in C!
It illustrates the use of PyErr_ExceptionMatches() and
PyErr_Clear() to handle specific exceptions, and the use of
Py_XDECREF() to dispose of owned references that may be NULL (note the
'X' in the name; Py_DECREF() would crash when confronted with a
NULL reference).  It is important that the variables used to hold owned
references are initialized to NULL for this to work; likewise, the proposed
return value is initialized to -1 (failure) and only set to success after
the final call made is successful.
The one important task that only embedders (as opposed to extension writers) of
the Python interpreter have to worry about is the initialization, and possibly
the finalization, of the Python interpreter.  Most functionality of the
interpreter can only be used after the interpreter has been initialized.
The basic initialization function is Py_Initialize(). This initializes
the table of loaded modules, and creates the fundamental modules
builtins, __main__, and sys.  It also
initializes the module search path (sys.path).
Py_Initialize() does not set the "script argument list"  (sys.argv).
If this variable is needed by Python code that will be executed later, it must
be set explicitly with a call to  PySys_SetArgvEx(argc, argv, updatepath)
after the call to Py_Initialize().
On most systems (in particular, on Unix and Windows, although the details are
slightly different), Py_Initialize() calculates the module search path
based upon its best guess for the location of the standard Python interpreter
executable, assuming that the Python library is found in a fixed location
relative to the Python interpreter executable.  In particular, it looks for a
directory named lib/pythonX.Y relative to the parent directory
where the executable named python is found on the shell command search
path (the environment variable PATH).
For instance, if the Python executable is found in
/usr/local/bin/python, it will assume that the libraries are in
/usr/local/lib/pythonX.Y.  (In fact, this particular path is also
the "fallback" location, used when no executable file named python is
found along PATH.)  The user can override this behavior by setting the
environment variable PYTHONHOME, or insert additional directories in
front of the standard path by setting PYTHONPATH.
The embedding application can steer the search by calling
Py_SetProgramName(file) before calling  Py_Initialize().  Note that
PYTHONHOME still overrides this and PYTHONPATH is still
inserted in front of the standard path.  An application that requires total
control has to provide its own implementation of Py_GetPath(),
Py_GetPrefix(), Py_GetExecPrefix(), and
Py_GetProgramFullPath() (all defined in Modules/getpath.c).
Sometimes, it is desirable to "uninitialize" Python.  For instance,  the
application may want to start over (make another call to
Py_Initialize()) or the application is simply done with its  use of
Python and wants to free memory allocated by Python.  This can be accomplished
by calling Py_FinalizeEx().  The function Py_IsInitialized() returns
true if Python is currently in the initialized state.  More information about
these functions is given in a later chapter. Notice that Py_FinalizeEx()
does not free all memory allocated by the Python interpreter, e.g. memory
allocated by extension modules currently cannot be released.
Python can be built with several macros to enable extra checks of the
interpreter and extension modules.  These checks tend to add a large amount of
overhead to the runtime so they are not enabled by default.
A full list of the various types of debugging builds is in the file
Misc/SpecialBuilds.txt in the Python source distribution. Builds are
available that support tracing of reference counts, debugging the memory
allocator, or low-level profiling of the main interpreter loop.  Only the most
frequently-used builds will be described in the remainder of this section.
Compiling the interpreter with the Py_DEBUG macro defined produces
what is generally meant by "a debug build" of Python. Py_DEBUG is
enabled in the Unix build by adding --with-pydebug to the
./configure command.  It is also implied by the presence of the
not-Python-specific _DEBUG macro.  When Py_DEBUG is enabled
in the Unix build, compiler optimization is disabled.
除了前面描述的引用计数调试之外，还执行以下额外检查：
额外检查将添加到对象分配器。
额外的检查将添加到解析器和编译器中。
Downcasts from wide types to narrow types are checked for loss of information.
许多断言被添加到字典和集合实现中。另外，集合对象包含 test_c_api() 方法。
添加输入参数的完整性检查到框架创建中。
使用已知的无效模式初始化整型的存储，以捕获对未初始化数字的引用。
添加底层跟踪和额外的异常检查到虚拟机的运行时中。
Extra checks are added to the memory arena implementation.
添加额外调试到线程模块。
这里可能没有提到的额外的检查。
Defining Py_TRACE_REFS enables reference tracing.  When defined, a
circular doubly linked list of active objects is maintained by adding two extra
fields to every PyObject.  Total allocations are tracked as well.  Upon
exit, all existing references are printed.  (In interactive mode this happens
after every statement run by the interpreter.)  Implied by Py_DEBUG.
有关更多详细信息，请参阅Python源代码中的 Misc/SpecialBuilds.txt 。
Python/C API 参考手册
稳定的应用程序二进制接口
</body></doc>