<?xml version='1.0' encoding='utf-8'?>
<doc><id>407</id><url>https://docs.python.org/zh-cn/3/library/asyncio-stream.html</url><title>流</title><body>源码: Lib/asyncio/streams.py
流是用于处理网络连接的高级 async/await-ready 原语。流允许发送和接收数据，而不需要使用回调或低级协议和传输。
下面是一个使用 asyncio streams 编写的 TCP echo 客户端示例:
参见下面的 Examples 部分。
Stream 函数
下面的高级 asyncio 函数可以用来创建和处理流:
建立网络连接并返回一对 (reader, writer) 对象。
返回的 reader 和 writer 对象是 StreamReader 和 StreamWriter 类的实例。
loop 参数是可选的，当从协程中等待该函数时，总是可以自动确定。
limit 确定返回的 StreamReader 实例使用的缓冲区大小限制。默认情况下，limit 设置为 64 KiB 。
其余的参数直接传递到 loop.create_connection() 。
3.7 新版功能: ssl_handshake_timeout 形参。
启动套接字服务。
当一个新的客户端连接被建立时，回调函数 client_connected_cb 会被调用。该函数会接收到一对参数 (reader, writer) ，reader是类 StreamReader 的实例，而writer是类 StreamWriter 的实例。
client_connected_cb 即可以是普通的可调用对象也可以是一个 协程函数; 如果它是一个协程函数，它将自动作为 Task 被调度。
loop 参数是可选的。当在一个协程中await该方法时，该参数始终可以自动确定。
limit 确定返回的 StreamReader 实例使用的缓冲区大小限制。默认情况下，limit 设置为 64 KiB 。
余下的参数将会直接传递给 loop.create_server().
3.7 新版功能: The ssl_handshake_timeout and start_serving parameters.
Unix 套接字
建立一个 Unix 套接字连接并返回 (reader, writer) 这对返回值。
与 open_connection() 相似，但是操作在 Unix 套接字上
请看文档 loop.create_unix_connection().
可用性: Unix。
3.7 新版功能: ssl_handshake_timeout 形参。
在 3.7 版更改: path 现在是一个 path-like object
启动一个Unix socket服务。
与 start_server() 相似，但是是在 Unix 套接字上的操作。
请看文档 loop.create_unix_server().
可用性: Unix。
3.7 新版功能: The ssl_handshake_timeout and start_serving parameters.
在 3.7 版更改: path 形参现在可以是 path-like object 对象。
这个类表示一个提供api来从IO流中读取数据的读取器对象。
不推荐直接实例化 StreamReader 对象，建议使用 open_connection() 和 start_server() 来获取 StreamReader 实例。
读取 n 个byte.  如果没有设置 n , 则自动置为 -1 ，读至 EOF 并返回所有读取的byte。
如果读到EOF，且内部缓冲区为空，则返回一个空的 bytes 对象。
读取一行，其中“行”指的是以 \n 结尾的字节序列。
如果读到EOF而没有找到 \n ，该方法返回部分读取的数据。
如果读到EOF，且内部缓冲区为空，则返回一个空的 bytes 对象。
精准读取 n 个 bytes，不能超过也不能少于。
如果在读取完 n 个byte之前读取到EOF，则会抛出 IncompleteReadError 异常。使用 IncompleteReadError.partial 属性来获取到达流结束之前读取的 bytes 字符串。
从流中读取数据直至遇到 分隔符
成功后，数据和指定的separator将从内部缓冲区中删除(或者说被消费掉)。返回的数据将包括在末尾的指定separator。
如果读取的数据量超过了配置的流限制，将引发 LimitOverrunError 异常，数据将留在内部缓冲区中并可以再次读取。
如果在找到完整的separator之前到达EOF，则会引发 IncompleteReadError 异常，并重置内部缓冲区。 IncompleteReadError.partial 属性可能包含指定separator的一部分。
3.5.2 新版功能.
如果缓冲区为空并且 feed_eof() 被调用，则返回 True 。
这个类表示一个写入器对象，该对象提供api以便于写数据至IO流中。
It is not recommended to instantiate StreamWriter objects
directly; use open_connection() and start_server()
instead.
The method attempts to write the data to the underlying socket immediately.
If that fails, the data is queued in an internal write buffer until it can be
sent.
The method should be used along with the drain() method:
The method writes a list (or any iterable) of bytes to the underlying socket
immediately.
If that fails, the data is queued in an internal write buffer until it can be
sent.
The method should be used along with the drain() method:
The method closes the stream and the underlying socket.
The method should be used along with the wait_closed() method:
Return True if the underlying transport supports
the write_eof() method, False otherwise.
Close the write end of the stream after the buffered write
data is flushed.
Return the underlying asyncio transport.
Access optional transport information; see
BaseTransport.get_extra_info() for details.
Wait until it is appropriate to resume writing to the stream.
Example:
This is a flow control method that interacts with the underlying
IO write buffer.  When the size of the buffer reaches
the high watermark, drain() blocks until the size of the
buffer is drained down to the low watermark and writing can
be resumed.  When there is nothing to wait for, the drain()
returns immediately.
Return True if the stream is closed or in the process of
being closed.
3.7 新版功能.
Wait until the stream is closed.
Should be called after close() to wait until the underlying
connection is closed.
3.7 新版功能.
TCP echo client using the asyncio.open_connection() function:
参见
The TCP echo client protocol
example uses the low-level loop.create_connection() method.
TCP echo server using the asyncio.start_server() function:
参见
The TCP echo server protocol
example uses the loop.create_server() method.
Simple example querying HTTP headers of the URL passed on the command line:
用法:
or with HTTPS:
Coroutine waiting until a socket receives data using the
open_connection() function:
参见
The register an open socket to wait for data using a protocol example uses a low-level protocol and
the loop.create_connection() method.
The watch a file descriptor for read events example uses the low-level
loop.add_reader() method to watch a file descriptor.
协程与任务
Synchronization Primitives
</body></doc>