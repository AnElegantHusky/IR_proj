<?xml version='1.0' encoding='utf-8'?>
<doc><id>110</id><url>https://docs.python.org/zh-cn/3/library/venv.html</url><title> --- 创建虚拟环境</title><body>3.3 新版功能.
源码： Lib/venv/
venv 模块支持使用自己的站点目录创建轻量级“虚拟环境”，可选择与系统站点目录隔离。每个虚拟环境都有自己的 Python 二进制文件（与用于创建此环境的二进制文件的版本相匹配），并且可以在其站点目录中拥有自己独立的已安装 Python 软件包集。
有关 Python 虚拟环境的更多信息，请参阅 PEP 405 。
参见
Python Packaging User Guide: Creating and using virtual environments
通过执行 venv 指令来创建一个 虚拟环境:
Running this command creates the target directory (creating any parent
directories that don't exist already) and places a pyvenv.cfg file in it
with a home key pointing to the Python installation from which the command
was run (a common name for the target directory is .venv).  It also creates
a bin (or Scripts on Windows) subdirectory containing a copy/symlink
of the Python binary/binaries (as appropriate for the platform or arguments
used at environment creation time). It also creates an (initially empty)
lib/pythonX.Y/site-packages subdirectory (on Windows, this is
Lib\site-packages). If an existing directory is specified, it will be
re-used.
3.6 版后已移除: pyvenv 是 Python 3.3 和 3.4 中创建虚拟环境的推荐工具，不过 在 Python 3.6 中已弃用。
在 3.5 版更改: 现在推荐使用 venv 来创建虚拟环境。
On Windows, invoke the venv command as follows:
Alternatively, if you configured the PATH and PATHEXT variables for
your Python installation:
The command, if run with -h, will show the available options:
在 3.4 版更改: Installs pip by default, added the --without-pip  and --copies
options
在 3.4 版更改: In earlier versions, if the target directory already existed, an error was
raised, unless the --clear or --upgrade option was provided.
注解
While symlinks are supported on Windows, they are not recommended. Of
particular note is that double-clicking python.exe in File Explorer
will resolve the symlink eagerly and ignore the virtual environment.
注解
On Microsoft Windows, it may be required to enable the Activate.ps1
script by setting the execution policy for the user. You can do this by
issuing the following PowerShell command:
PS C:&gt; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
See About Execution Policies
for more information.
The created pyvenv.cfg file also includes the
include-system-site-packages key, set to true if venv is
run with the --system-site-packages option, false otherwise.
Unless the --without-pip option is given, ensurepip will be
invoked to bootstrap pip into the virtual environment.
Multiple paths can be given to venv, in which case an identical virtual
environment will be created, according to the given options, at each provided
path.
Once a virtual environment has been created, it can be "activated" using a
script in the virtual environment's binary directory. The invocation of the
script is platform-specific (&lt;venv&gt; must be replaced by the path of the
directory containing the virtual environment):
平台
Shell
用于激活虚拟环境的命令
POSIX
bash/zsh
$ source &lt;venv&gt;/bin/activate
fish
$ . &lt;venv&gt;/bin/activate.fish
csh/tcsh
$ source &lt;venv&gt;/bin/activate.csh
PowerShell Core
$ &lt;venv&gt;/bin/Activate.ps1
Windows
cmd.exe
C:\&gt; &lt;venv&gt;\Scripts\activate.bat
PowerShell
PS C:\&gt; &lt;venv&gt;\Scripts\Activate.ps1
You don't specifically need to activate an environment; activation just
prepends the virtual environment's binary directory to your path, so that
"python" invokes the virtual environment's Python interpreter and you can run
installed scripts without having to use their full path. However, all scripts
installed in a virtual environment should be runnable without activating it,
and run with the virtual environment's Python automatically.
You can deactivate a virtual environment by typing "deactivate" in your shell.
The exact mechanism is platform-specific and is an internal implementation
detail (typically a script or shell function will be used).
3.4 新版功能: fish and csh activation scripts.
3.8 新版功能: PowerShell activation scripts installed under POSIX for PowerShell Core
support.
注解
A virtual environment is a Python environment such that the Python
interpreter, libraries and scripts installed into it are isolated from those
installed in other virtual environments, and (by default) any libraries
installed in a "system" Python, i.e., one which is installed as part of your
operating system.
A virtual environment is a directory tree which contains Python executable
files and other files which indicate that it is a virtual environment.
Common installation tools such as setuptools and pip work as
expected with virtual environments. In other words, when a virtual
environment is active, they install Python packages into the virtual
environment without needing to be told to do so explicitly.
When a virtual environment is active (i.e., the virtual environment's Python
interpreter is running), the attributes sys.prefix and
sys.exec_prefix point to the base directory of the virtual
environment, whereas sys.base_prefix and
sys.base_exec_prefix point to the non-virtual environment Python
installation which was used to create the virtual environment. If a virtual
environment is not active, then sys.prefix is the same as
sys.base_prefix and sys.exec_prefix is the same as
sys.base_exec_prefix (they all point to a non-virtual environment
Python installation).
When a virtual environment is active, any options that change the
installation path will be ignored from all distutils configuration
files to prevent projects being inadvertently installed outside of the
virtual environment.
When working in a command shell, users can make a virtual environment active
by running an activate script in the virtual environment's executables
directory (the precise filename and command to use the file is
shell-dependent), which prepends the virtual environment's directory for
executables to the PATH environment variable for the running shell. There
should be no need in other circumstances to activate a virtual
environment; scripts installed into virtual environments have a "shebang"
line which points to the virtual environment's Python interpreter. This means
that the script will run with that interpreter regardless of the value of
PATH. On Windows, "shebang" line processing is supported if you have the
Python Launcher for Windows installed (this was added to Python in 3.3 - see
PEP 397 for more details). Thus, double-clicking an installed script in a
Windows Explorer window should run the script with the correct interpreter
without there needing to be any reference to its virtual environment in
PATH.
The high-level method described above makes use of a simple API which provides
mechanisms for third-party virtual environment creators to customize environment
creation according to their needs, the EnvBuilder class.
The EnvBuilder class accepts the following keyword arguments on
instantiation:
system_site_packages -- a Boolean value indicating that the system Python
site-packages should be available to the environment (defaults to False).
clear -- a Boolean value which, if true, will delete the contents of
any existing target directory, before creating the environment.
symlinks -- a Boolean value indicating whether to attempt to symlink the
Python binary rather than copying.
upgrade -- a Boolean value which, if true, will upgrade an existing
environment with the running Python - for use when that Python has been
upgraded in-place (defaults to False).
with_pip -- a Boolean value which, if true, ensures pip is
installed in the virtual environment. This uses ensurepip with
the --default-pip option.
prompt -- a String to be used after virtual environment is activated
(defaults to None which means directory name of the environment would
be used).
在 3.4 版更改: Added the with_pip parameter
3.6 新版功能: Added the prompt parameter
Creators of third-party virtual environment tools will be free to use the
provided EnvBuilder class as a base class.
The returned env-builder is an object which has a method, create:
Create a virtual environment by specifying the target directory
(absolute or relative to the current directory) which is to contain the
virtual environment.  The create method will either create the
environment in the specified directory, or raise an appropriate
exception.
The create method of the EnvBuilder class illustrates the
hooks available for subclass customization:
Each of the methods ensure_directories(),
create_configuration(), setup_python(),
setup_scripts() and post_setup() can be overridden.
Creates the environment directory and all necessary directories, and
returns a context object.  This is just a holder for attributes (such as
paths), for use by the other methods. The directories are allowed to
exist already, as long as either clear or upgrade were
specified to allow operating on an existing environment directory.
Creates the pyvenv.cfg configuration file in the environment.
Creates a copy or symlink to the Python executable in the environment.
On POSIX systems, if a specific executable python3.x was used,
symlinks to python and python3 will be created pointing to that
executable, unless files with those names already exist.
Installs activation scripts appropriate to the platform into the virtual
environment.
A placeholder method which can be overridden in third party
implementations to pre-install packages in the virtual environment or
perform other post-creation steps.
在 3.7.2 版更改: Windows now uses redirector scripts for python[w].exe instead of
copying the actual binaries. In 3.7.2 only setup_python() does
nothing unless running from a build in the source tree.
在 3.7.3 版更改: Windows copies the redirector scripts as part of setup_python()
instead of setup_scripts(). This was not the case in 3.7.2.
When using symlinks, the original executables will be linked.
In addition, EnvBuilder provides this utility method that can be
called from setup_scripts() or post_setup() in subclasses to
assist in installing custom scripts into the virtual environment.
path is the path to a directory that should contain subdirectories
"common", "posix", "nt", each containing scripts destined for the bin
directory in the environment.  The contents of "common" and the
directory corresponding to os.name are copied after some text
replacement of placeholders:
__VENV_DIR__ is replaced with the absolute path of the environment
directory.
__VENV_NAME__ is replaced with the environment name (final path
segment of environment directory).
__VENV_PROMPT__ is replaced with the prompt (the environment
name surrounded by parentheses and with a following space)
__VENV_BIN_NAME__ is replaced with the name of the bin directory
(either bin or Scripts).
__VENV_PYTHON__ is replaced with the absolute path of the
environment's executable.
The directories are allowed to exist (for when an existing environment
is being upgraded).
有一个方便实用的模块级别的函数:
通过关键词参数来创建一个 EnvBuilder，并且使用 env_dir 参数来调用它的 create() 方法。
3.3 新版功能.
在 3.4 版更改: Added the with_pip parameter
在 3.6 版更改: Added the prompt parameter
下面的脚本展示了如何通过实现一个子类来扩展 EnvBuilder。这个子类会安装 setuptotols 和 pip 的到被创建的虚拟环境中。
这个脚本同样可以 在线下载。
ensurepip --- Bootstrapping the pip installer
zipapp --- Manage executable Python zip archives
</body></doc>