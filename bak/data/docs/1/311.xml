<?xml version='1.0' encoding='utf-8'?>
<doc><id>311</id><url>https://docs.python.org/zh-cn/3/c-api/type.html</url><title>类型对象</title><body>对象的 C 结构用于描述 built-in 类型。
这是属于 type 对象的 type object，它在 Python 层面和 type 是相同的对象。
如果对象 o 是一个类型对象，包括继承于标准类型对象的类型实例，返回真。在其它所有情况下返回假。
如果对象 o 是一个类型对象，但不是标准类型对象的子类型时，返回真。在其它所有情况下返回假。
Clear the internal lookup cache. Return the current version tag.
Return the tp_flags member of type. This function is primarily
meant for use with Py_LIMITED_API; the individual flag bits are
guaranteed to be stable across Python releases, but access to
tp_flags itself is not part of the limited API.
3.2 新版功能.
在 3.4 版更改: The return type is now unsigned long rather than long.
Invalidate the internal lookup cache for the type and all of its
subtypes.  This function must be called after any manual
modification of the attributes or base classes of the type.
Return true if the type object o sets the feature feature.  Type features
are denoted by single bit flags.
Return true if the type object includes support for the cycle detector; this
tests the type flag Py_TPFLAGS_HAVE_GC.
Return true if a is a subtype of b.
This function only checks for actual subtypes, which means that
__subclasscheck__() is not called on b.  Call
PyObject_IsSubclass() to do the same check that issubclass()
would do.
Generic handler for the tp_alloc slot of a type object.  Use
Python's default memory allocation mechanism to allocate a new instance and
initialize all its contents to NULL.
Generic handler for the tp_new slot of a type object.  Create a
new instance using the type's tp_alloc slot.
Finalize a type object.  This should be called on all type objects to finish
their initialization.  This function is responsible for adding inherited slots
from a type's base class.  Return 0 on success, or return -1 and sets an
exception on error.
Return the function pointer stored in the given slot. If the
result is NULL, this indicates that either the slot is NULL,
or that the function was called with invalid parameters.
Callers will typically cast the result pointer into the appropriate
function type.
See PyType_Slot.slot for possible values of the slot argument.
An exception is raised if type is not a heap type.
3.4 新版功能.
The following functions and structs are used to create
heap types.
Creates and returns a heap type object from the spec
(Py_TPFLAGS_HEAPTYPE).
If bases is a tuple, the created heap type contains all types contained
in it as base types.
If bases is NULL, the Py_tp_base slot is used instead.
If that also is NULL, the new type derives from object.
This function calls PyType_Ready() on the new type.
3.3 新版功能.
Equivalent to PyType_FromSpecWithBases(spec, NULL).
Structure defining a type's behavior.
Name of the type, used to set PyTypeObject.tp_name.
Size of the instance in bytes, used to set
PyTypeObject.tp_basicsize and
PyTypeObject.tp_itemsize.
Type flags, used to set PyTypeObject.tp_flags.
If the Py_TPFLAGS_HEAPTYPE flag is not set,
PyType_FromSpecWithBases() sets it automatically.
Array of PyType_Slot structures.
Terminated by the special slot value {0, NULL}.
Structure defining optional functionality of a type, containing a slot ID
and a value pointer.
A slot ID.
Slot IDs are named like the field names of the structures
PyTypeObject, PyNumberMethods,
PySequenceMethods, PyMappingMethods and
PyAsyncMethods with an added Py_ prefix.
For example, use:
Py_tp_dealloc to set PyTypeObject.tp_dealloc
Py_nb_add to set PyNumberMethods.nb_add
Py_sq_length to set PySequenceMethods.sq_length
The following fields cannot be set using PyType_Spec and PyType_Slot:
tp_dict
tp_mro
tp_cache
tp_subclasses
tp_weaklist
tp_print
tp_weaklistoffset
tp_dictoffset
bf_getbuffer
bf_releasebuffer
Setting Py_tp_bases may be problematic on some platforms.
To avoid issues, use the bases argument of
PyType_FromSpecWithBases() instead.
The desired value of the slot. In most cases, this is a pointer
to a function.
May not be NULL.
具体的对象层
None 对象
</body></doc>