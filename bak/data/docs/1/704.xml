<?xml version='1.0' encoding='utf-8'?>
<doc><id>704</id><url>https://docs.python.org/zh-cn/3/library/traceback.html</url><title> --- 打印或检索堆栈回溯</title><body>源代码： Lib/traceback.py
该模块提供了一个标准接口来提取、格式化和打印 Python 程序的堆栈跟踪结果。它完全模仿Python 解释器在打印堆栈跟踪结果时的行为。当您想要在程序控制下打印堆栈跟踪结果时，例如在“封装”解释器时，这是非常有用的。
这个模块使用 traceback 对象 —— 这是存储在 sys.last_traceback 中的对象类型变量，并作为 sys.exc_info() 的第三项被返回。
这个模块定义了以下函数：
Print up to limit stack trace entries from traceback object tb (starting
from the caller's frame) if limit is positive.  Otherwise, print the last
abs(limit) entries.  If limit is omitted or None, all entries are
printed.  If file is omitted or None, the output goes to
sys.stderr; otherwise it should be an open file or file-like object to
receive the output.
在 3.5 版更改: Added negative limit support.
打印回溯对象 tb 到 file 的异常信息和整个堆栈回溯。这和 print_tb() 比有以下方面不同：
如果 tb 不为 None，它将打印头部 Traceback (most recent call last):
it prints the exception etype and value after the stack trace
if type(value) is SyntaxError and value has the appropriate
format, it prints the line where the syntax error occurred with a caret
indicating the approximate position of the error.
The optional limit argument has the same meaning as for print_tb().
If chain is true (the default), then chained exceptions (the
__cause__ or __context__ attributes of the exception) will be
printed as well, like the interpreter itself does when printing an unhandled
exception.
在 3.5 版更改: The etype argument is ignored and inferred from the type of value.
This is a shorthand for print_exception(*sys.exc_info(), limit, file,
chain).
This is a shorthand for print_exception(sys.last_type, sys.last_value,
sys.last_traceback, limit, file, chain).  In general it will work only
after an exception has reached an interactive prompt (see
sys.last_type).
Print up to limit stack trace entries (starting from the invocation
point) if limit is positive.  Otherwise, print the last abs(limit)
entries.  If limit is omitted or None, all entries are printed.
The optional f argument can be used to specify an alternate stack frame
to start.  The optional file argument has the same meaning as for
print_tb().
在 3.5 版更改: Added negative limit support.
Return a StackSummary object representing a list of "pre-processed"
stack trace entries extracted from the traceback object tb.  It is useful
for alternate formatting of stack traces.  The optional limit argument has
the same meaning as for print_tb().  A "pre-processed" stack trace
entry is a FrameSummary object containing attributes
filename, lineno,
name, and line representing the
information that is usually printed for a stack trace.  The
line is a string with leading and trailing
whitespace stripped; if the source is not available it is None.
Extract the raw traceback from the current stack frame.  The return value has
the same format as for extract_tb().  The optional f and limit
arguments have the same meaning as for print_stack().
Given a list of tuples or FrameSummary objects as returned by
extract_tb() or extract_stack(), return a list of strings ready
for printing.  Each string in the resulting list corresponds to the item with
the same index in the argument list.  Each string ends in a newline; the
strings may contain internal newlines as well, for those items whose source
text line is not None.
Format the exception part of a traceback.  The arguments are the exception
type and value such as given by sys.last_type and sys.last_value.
The return value is a list of strings, each ending in a newline.  Normally,
the list contains a single string; however, for SyntaxError
exceptions, it contains several lines that (when printed) display detailed
information about where the syntax error occurred.  The message indicating
which exception occurred is the always last string in the list.
Format a stack trace and the exception information.  The arguments  have the
same meaning as the corresponding arguments to print_exception().  The
return value is a list of strings, each ending in a newline and some
containing internal newlines.  When these lines are concatenated and printed,
exactly the same text is printed as does print_exception().
在 3.5 版更改: The etype argument is ignored and inferred from the type of value.
This is like print_exc(limit) but returns a string instead of printing to
a file.
A shorthand for format_list(extract_tb(tb, limit)).
A shorthand for format_list(extract_stack(f, limit)).
Clears the local variables of all the stack frames in a traceback tb
by calling the clear() method of each frame object.
3.4 新版功能.
Walk a stack following f.f_back from the given frame, yielding the frame
and line number for each frame. If f is None, the current stack is
used. This helper is used with StackSummary.extract().
3.5 新版功能.
Walk a traceback following tb_next yielding the frame and line number
for each frame. This helper is used with StackSummary.extract().
3.5 新版功能.
The module also defines the following classes:
3.5 新版功能.
TracebackException objects are created from actual exceptions to
capture data for later printing in a lightweight fashion.
Capture an exception for later rendering. limit, lookup_lines and
capture_locals are as for the StackSummary class.
Note that when locals are captured, they are also shown in the traceback.
A TracebackException of the original __cause__.
A TracebackException of the original __context__.
The __suppress_context__ value from the original exception.
A StackSummary representing the traceback.
The class of the original traceback.
For syntax errors - the file name where the error occurred.
For syntax errors - the line number where the error occurred.
For syntax errors - the text where the error occurred.
For syntax errors - the offset into the text where the error occurred.
For syntax errors - the compiler error message.
Capture an exception for later rendering. limit, lookup_lines and
capture_locals are as for the StackSummary class.
Note that when locals are captured, they are also shown in the traceback.
Format the exception.
If chain is not True, __cause__ and __context__ will not
be formatted.
The return value is a generator of strings, each ending in a newline and
some containing internal newlines. print_exception()
is a wrapper around this method which just prints the lines to a file.
The message indicating which exception occurred is always the last
string in the output.
Format the exception part of the traceback.
The return value is a generator of strings, each ending in a newline.
Normally, the generator emits a single string; however, for
SyntaxError exceptions, it emits several lines that (when
printed) display detailed information about where the syntax
error occurred.
The message indicating which exception occurred is always the last
string in the output.
3.5 新版功能.
StackSummary objects represent a call stack ready for formatting.
Construct a StackSummary object from a frame generator (such as
is returned by walk_stack() or
walk_tb()).
If limit is supplied, only this many frames are taken from frame_gen.
If lookup_lines is False, the returned FrameSummary
objects will not have read their lines in yet, making the cost of
creating the StackSummary cheaper (which may be valuable if it
may not actually get formatted). If capture_locals is True the
local variables in each FrameSummary are captured as object
representations.
Construct a StackSummary object from a supplied list of
FrameSummary objects or old-style list of tuples.  Each tuple
should be a 4-tuple with filename, lineno, name, line as the elements.
Returns a list of strings ready for printing.  Each string in the
resulting list corresponds to a single frame from the stack.
Each string ends in a newline; the strings may contain internal
newlines as well, for those items with source text lines.
For long sequences of the same frame and line, the first few
repetitions are shown, followed by a summary line stating the exact
number of further repetitions.
在 3.6 版更改: Long sequences of repeated frames are now abbreviated.
3.5 新版功能.
FrameSummary objects represent a single frame in a traceback.
Represent a single frame in the traceback or stack that is being formatted
or printed. It may optionally have a stringified version of the frames
locals included in it. If lookup_line is False, the source code is not
looked up until the FrameSummary has the line
attribute accessed (which also happens when casting it to a tuple).
line may be directly provided, and will prevent line
lookups happening at all. locals is an optional local variable
dictionary, and if supplied the variable representations are stored in the
summary for later display.
This simple example implements a basic read-eval-print loop, similar to (but
less useful than) the standard Python interactive interpreter loop.  For a more
complete implementation of the interpreter loop, refer to the code
module.
The following example demonstrates the different ways to print and format the
exception and traceback:
The output for the example would look similar to this:
The following example shows the different ways to print and format the stack:
This last example demonstrates the final few formatting functions:
atexit --- 退出处理器
__future__ --- Future 语句定义
</body></doc>